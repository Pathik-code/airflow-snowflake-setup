version: "3.8"
x-airflow-common: &airflow-common
  image: apache/airflow:2.7.1
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@host.docker.internal:5432/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://postgres:postgres@host.docker.internal:5432/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__DATABASE__LOAD_DEFAULT_CONNECTIONS: "true"
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./requirements.txt:/requirements.txt
  extra_hosts:
    - "host.docker.internal:host-gateway"
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - airflow-network

  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - airflow-network

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "4040:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - airflow-network

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - airflow-network

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - airflow-network

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        # Create virtual environment
        python -m venv /opt/airflow/venv && \
        . /opt/airflow/venv/bin/activate && \
        # Install base requirements first
        python -m pip install --upgrade pip --no-user && \
        python -m pip install --no-user --no-cache-dir \
          "connexion[flask,swagger-ui]==2.14.2" \
          "swagger-ui-bundle==0.0.9" && \
        # Then install Airflow and other requirements
        python -m pip install --no-user --no-cache-dir -r /requirements.txt && \
        # Initialize Airflow DB
        airflow db init && \
        airflow users create \
          --username admin \
          --firstname admin \
          --lastname admin \
          --role Admin \
          --email admin@example.com \
          --password admin
    environment:
      <<: *airflow-common-env
      AIRFLOW_HOME: "/opt/airflow"
      VIRTUAL_ENV: "/opt/airflow/venv"
      PATH: "/opt/airflow/venv/bin:${PATH}"
      PYTHONPATH: "/opt/airflow/venv/lib/python3.8/site-packages:/opt/airflow"
      PIP_NO_USER: "1"
    user: "0:0"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./requirements.txt:/requirements.txt
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: none
    networks:
      - airflow-network

networks:
  airflow-network:
    external: true # This tells Docker to use the existing network
  default:
    driver: bridge

volumes:
  postgres-db-volume:
    driver: local
